// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  emailVerified   DateTime?
  image           String?
  password        String?          // For email/password authentication
  accounts        Account[]
  sessions        Session[]
  integrations    Integration[]
  trackedKeywords TrackedKeyword[]
  competitors     Competitor[]
  posts           Post[]
  tasks           Task[]
  planId          Int?
  plan            Plan?            @relation(fields: [planId], references: [id])
  featureFlags    Json?            // Manual feature overrides (e.g., {"spam_detection": true})
  tokenUsageThisPeriod Int         @default(0)  // Current period token usage
  currentPeriodEnd     DateTime?               // When current billing period ends
  invitationToken InvitationToken?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Integration {
  id                    Int      @id @default(autoincrement())
  accountId             String
  accessToken           String
  refreshToken          String
  refreshTokenExpiresAt DateTime
  userId                String
  isActive              Boolean  @default(false)
  user                  User     @relation(fields: [userId], references: [id])
  providerId            Int
  provider              Provider @relation(fields: [providerId], references: [id])
  posts                 Post[]
  tasks                 Task[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())
}

model Provider {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  image           String
  description     String?
  integrations    Integration[]
  trackedKeywords TrackedKeyword[]
  posts           Post[]
  tasks           Task[]
  mentions        Mention[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
}

model Post {
  id            Int         @id @default(autoincrement())
  remoteId      String
  title         String
  description   String?
  postUrl       String
  imageUrl      String?
  publishedAt   DateTime
  isBlacklisted Boolean     @default(false)
  commentCount  Int
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  integrationId Int?
  integration   Integration? @relation(fields: [integrationId], references: [id])
  providerId    Int
  provider      Provider    @relation(fields: [providerId], references: [id])
  mentions      Mention[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId, providerId])
  @@index([providerId, createdAt])
}

model Mention {
  id              Int             @id @default(autoincrement())
  remoteId        String
  sourceType      MentionSource
  content         String
  sentiment       String?
  score           String?
  sentimentStatus SentimentStatus @default(PENDING)
  sourceUrl       String? // e.g. permalink or video URL
  author          String? // username or channel name
  originLabel     String? // subreddit, video title, etc.

  postId Int?
  post   Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

  trackedKeywordId Int?
  trackedKeyword   TrackedKeyword? @relation(fields: [trackedKeywordId], references: [id], onDelete: Cascade)

  providerId Int?
  provider   Provider? @relation(fields: [providerId], references: [id])

  aspectAnalyses AspectAnalysis[]
  subTaskMention SubTaskMention[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([remoteId, sourceType])
}

model AspectAnalysis {
  id        Int      @id @default(autoincrement())
  aspect    String
  sentiment String
  score     String?
  mentionId Int
  mention   Mention  @relation(fields: [mentionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id            Int         @id @default(autoincrement())
  type          TaskType
  status        TaskStatus  @default(PENDING)
  errorMessage  String?
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  subTasks      SubTask[]
  integrationId Int?
  integration   Integration? @relation(fields: [integrationId], references: [id])
  providerId    Int
  provider      Provider    @relation(fields: [providerId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([userId, providerId])
  @@index([providerId, createdAt])
}

model SubTask {
  id              Int              @id @default(autoincrement())
  status          SubTaskStatus    @default(PENDING)
  type            SubTaskType
  errorMessage    String?
  taskId          Int
  task            Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  data            Json // Data needed for the job, e.g., post IDs or integration details
  queue           Queue? // New relationship (one-to-one)
  subTaskMentions SubTaskMention[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model SubTaskMention {
  id        Int @id @default(autoincrement())
  subTaskId Int
  mentionId Int

  status   SubTaskMentionStatus @default(PENDING)
  analysis String?

  // Foreign keys
  subTask SubTask @relation(fields: [subTaskId], references: [id], onDelete: Cascade)
  mention Mention @relation(fields: [mentionId], references: [id], onDelete: Cascade)

  @@unique([subTaskId, mentionId])
}

model Plan {
  id               Int         @id @default(autoincrement())
  name             String      @unique
  description      String?
  price            Decimal?    // Monthly price in cents (e.g., 999 for $9.99)
  yearlyPrice      Decimal?    // Yearly price in cents for annual billing
  billingInterval  BillingInterval @default(MONTHLY)
  maxIntegrations  Int         @default(1)
  maxTrackedKeywords Int       @default(5)
  maxCompetitors   Int         @default(0)  // New field for competitor limits
  monthlyTokenAllowance Int    @default(100000)  // Monthly token allowance for hybrid billing
  features         Json        @default("{}")  // Feature flags as JSON
  isActive         Boolean     @default(true)
  displayOrder     Int         @default(0)     // For UI ordering
  users            User[]
  invitationTokens InvitationToken[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now())
}

model PromoCode {
  id            String    @id @default(cuid())
  code          String    @unique // The code itself, e.g., "EARLY-ADOPTER"
  isActive      Boolean   @default(true)

  // FUTURE: For discounts on paid plans
  discountType  String?   // e.g., 'PERCENT', 'FIXED_AMOUNT'
  discountValue Decimal?  // e.g., 20 (for 20%)

  // Usage Controls
  expiresAt     DateTime?
  maxUses       Int?      // e.g., "First 100 users only!"
  timesUsed     Int       @default(0)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum InvitationStatus {
  PENDING
  USED
  EXPIRED
}

model InvitationToken {
  id              String           @id @default(cuid())
  token           String           @unique
  expiresAt       DateTime
  status          InvitationStatus @default(PENDING)
  planToAssignId  Int
  planToAssign    Plan             @relation(fields: [planToAssignId], references: [id])
  redeemedAt      DateTime?
  redeemedByUserId String?          @unique
  redeemedByUser  User?            @relation(fields: [redeemedByUserId], references: [id])
  createdAt       DateTime         @default(now())
}

model Queue {
  id           Int         @id @default(autoincrement())
  status       QueueStatus @default(NEW)
  subTaskId    Int         @unique // Added @unique here
  subTask      SubTask     @relation(fields: [subTaskId], references: [id])
  payload      Json
  processingAt DateTime?
  isDead       Boolean     @default(false)
  attempts     Int         @default(0)
  maxAttempts  Int         @default(3)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model TrackedKeyword {
  id         Int       @id @default(autoincrement())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerId Int
  provider   Provider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  keyword    String
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  mention    Mention[]

  @@unique([userId, keyword, providerId]) // Prevents duplicate tracking
}

model Competitor {
  id               Int                    @id @default(autoincrement())
  name             String                 // Company/brand name to track
  userId           String
  user             User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive         Boolean                @default(true)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  sentimentData    CompetitorSentiment[]

  @@unique([userId, name]) // Prevents duplicate competitor tracking per user
}

model CompetitorSentiment {
  id           Int        @id @default(autoincrement())
  competitorId Int
  competitor   Competitor @relation(fields: [competitorId], references: [id], onDelete: Cascade)
  date         DateTime   @default(now())
  score        Float      // Sentiment score (-1 to 1)
  sourceType   MentionSource
  mentionCount Int        @default(0) // Number of mentions found
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([competitorId, date, sourceType]) // One sentiment record per competitor per day per source
}

model EarlyAccessSignup {
  id           Int      @id @default(autoincrement())
  name         String?  // Optional name
  email        String   @unique // Unique email to prevent duplicates
  ipAddress    String?  // Optional IP tracking for analytics
  userAgent    String?  // Optional user agent for analytics
  referrer     String?  // Optional referrer tracking
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

enum QueueStatus {
  NEW
  PROCESSING
  DONE
  FAILED
}

enum SentimentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum TaskType {
  FULL_SYNC
  PARTIAL_SYNC
  ANALYZE_POST
  ANALYZE_COMMENTS
  FETCH_CONTENT
  EXPORT_DATA
  OTHER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum SubTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum SubTaskType {
  FETCH_CONTENT
  FETCH_INDIVIDUAL_POST_CONTNENT
  ANALYZE_CONTENT_SENTIMENT
  FETCH_REDDIT_KEYWORD_MENTIONS
  DETECT_SPAM
  EXPORT_FETCH_DATA
  EXPORT_FORMAT_DATA
  EXPORT_GENERATE_FILE
}

enum SubTaskMentionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum MentionSource {
  YOUTUBE
  REDDIT
  FACEBOOK
  INSTAGRAM
  TIKTOK
  LINKEDIN
}

enum BillingInterval {
  MONTHLY
  YEARLY
}

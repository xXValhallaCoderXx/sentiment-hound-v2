// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  socialAccounts SocialAccount[]
  posts         Post[]
  tasks         Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 

model SocialAccount {
  id          Int           @id @default(autoincrement())
  provider    String
  accountId   String
  accessToken String
  refreshToken String
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  posts       Post[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Post {
  id              Int           @id @default(autoincrement())
  postId          String
  content         String
  videoUrl        String?
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  socialAccountId Int
  socialAccount   SocialAccount @relation(fields: [socialAccountId], references: [id])
  comments        Comment[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Comment {
  id              Int               @id @default(autoincrement())
  commentId       String
  content         String
  sentiment       Float?
  sentimentStatus SentimentStatus   @default(PENDING)
  postId          Int
  post            Post              @relation(fields: [postId], references: [id])
  aspectAnalyses  AspectAnalysis[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model AspectAnalysis {
  id            Int           @id @default(autoincrement())
  aspect        String
  sentiment     Float
  commentId     Int
  comment       Comment        @relation(fields: [commentId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Task {
  id            Int          @id @default(autoincrement())
  type          TaskType
  status        TaskStatus   @default(PENDING)
  errorMessage  String?
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  jobs          Job[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Job {
  id            Int          @id @default(autoincrement())
  status        JobStatus    @default(PENDING)
  errorMessage  String?
  taskId        Int
  task          Task         @relation(fields: [taskId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum SentimentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum TaskType {
  FETCH_COMMENTS
  ANALYZE_COMMENTS
  OTHER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum JobStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}
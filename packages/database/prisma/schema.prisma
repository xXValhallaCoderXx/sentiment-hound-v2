// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  name            String?
  email           String           @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  integrations    Integration[]
  trackedKeywords TrackedKeyword[]
  posts           Post[]
  tasks           Task[]
  planId          Int?
  plan            Plan?            @relation(fields: [planId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Integration {
  id                    Int      @id @default(autoincrement())
  accountId             String
  accessToken           String
  refreshToken          String
  refreshTokenExpiresAt DateTime
  userId                String
  isActive              Boolean  @default(false)
  user                  User     @relation(fields: [userId], references: [id])
  providerId            Int
  provider              Provider @relation(fields: [providerId], references: [id])
  posts                 Post[]
  tasks                 Task[]
  createdAt             DateTime @default(now())
  updatedAt             DateTime @default(now())
}

model Provider {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  image           String
  description     String?
  integrations    Integration[]
  trackedKeywords TrackedKeyword[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @default(now())
}

model Post {
  id            Int         @id @default(autoincrement())
  remoteId      String
  title         String
  description   String?
  postUrl       String
  imageUrl      String?
  publishedAt   DateTime
  isBlacklisted Boolean     @default(false)
  commentCount  Int
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  integrationId Int
  integration   Integration @relation(fields: [integrationId], references: [id])
  mentions      Mention[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Mention {
  id              Int             @id @default(autoincrement())
  remoteId        String
  sourceType      MentionSource
  content         String
  sentiment       String?
  score           String?
  mentionId       Int
  sentimentStatus SentimentStatus @default(PENDING)
  sourceUrl       String? // e.g. permalink or video URL
  author          String? // username or channel name
  originLabel     String? // subreddit, video title, etc.

  postId Int?
  post   Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

  trackedKeywordId Int?
  trackedKeyword   TrackedKeyword? @relation(fields: [trackedKeywordId], references: [id], onDelete: Cascade)

  aspectAnalyses AspectAnalysis[]
  subTaskMention SubTaskMention[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([remoteId, sourceType])
}

model AspectAnalysis {
  id        Int      @id @default(autoincrement())
  aspect    String
  sentiment String
  score     String?
  mentionId Int
  mention   Mention  @relation(fields: [mentionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id            Int         @id @default(autoincrement())
  type          TaskType
  status        TaskStatus  @default(PENDING)
  errorMessage  String?
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  subTasks      SubTask[]
  integrationId Int
  integration   Integration @relation(fields: [integrationId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model SubTask {
  id              Int              @id @default(autoincrement())
  status          SubTaskStatus    @default(PENDING)
  type            SubTaskType
  errorMessage    String?
  taskId          Int
  task            Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  data            Json // Data needed for the job, e.g., post IDs or integration details
  queue           Queue? // New relationship (one-to-one)
  subTaskMentions SubTaskMention[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model SubTaskMention {
  id        Int @id @default(autoincrement())
  subTaskId Int
  mentionId Int

  status   SubTaskMentionStatus @default(PENDING)
  analysis String?

  // Foreign keys
  subTask SubTask @relation(fields: [subTaskId], references: [id], onDelete: Cascade)
  mention Mention @relation(fields: [mentionId], references: [id], onDelete: Cascade)

  @@unique([subTaskId, mentionId])
}

model Plan {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model Queue {
  id           Int         @id @default(autoincrement())
  status       QueueStatus @default(NEW)
  subTaskId    Int         @unique // Added @unique here
  subTask      SubTask     @relation(fields: [subTaskId], references: [id])
  payload      Json
  processingAt DateTime?
  isDead       Boolean     @default(false)
  attempts     Int         @default(0)
  maxAttempts  Int         @default(3)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model TrackedKeyword {
  id         Int       @id @default(autoincrement())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerId Int
  provider   Provider  @relation(fields: [providerId], references: [id], onDelete: Cascade)
  keyword    String
  isActive   Boolean   @default(true)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  Mention    Mention[]

  @@unique([userId, keyword, providerId]) // Prevents duplicate tracking
}

enum QueueStatus {
  NEW
  PROCESSING
  DONE
  FAILED
}

enum SentimentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum TaskType {
  FULL_SYNC
  PARTIAL_SYNC
  ANALYZE_POST
  ANALYZE_COMMENTS
  FETCH_CONTENT
  OTHER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum SubTaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum SubTaskType {
  FETCH_CONTENT
  FETCH_INDIVIDUAL_POST_CONTNENT
  ANALYZE_CONTENT_SENTIMENT
  FETCH_REDDIT_KEYWORD_MENTIONS
}

enum SubTaskMentionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum MentionSource {
  YOUTUBE
  REDDIT
  FACEBOOK
  INSTAGRAM
  TIKTOK
  LINKEDIN
}
